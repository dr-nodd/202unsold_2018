#!/usr/bin/python3

import sys
import argparse


def check_value(a):
    value = int(a)
    if value <= 50:
        raise argparse.ArgumentTypeError("%r must be greater than 50"%(value,))
    return value


if len(sys.argv) == 3:
    parser = argparse.ArgumentParser(description='202unsold')
    parser.add_argument('a', type=check_value)
    parser.add_argument('b', type=check_value)


try:
    args = parser.parse_args()
except:
    exit(84)


def calc_value(a, x, b, y):
    return ((a - x) * (b - y)) / ((5 * a - 150) * (5 * b - 150))


def calc_sum_sublist(list, i):
    res = 0
    idx = 0
    while idx < len(list):
        res += list[idx][i]
        idx += 1
    return res


def calc_total(list_l, i):
    res = 0
    idx = 0
    while idx <= 9:
        if i >= 5 or idx >= 5:
            i -= 1
            idx += 1
        elif idx < 5 and i < 5:
            res += list_l[idx][i]
            idx += 1
            i -= 1
        if i < 0:
            return res
    return res


def calc_expected(list, list_2):
    res = 0
    i = 0
    while i < len(list):
        res += list[i] * list_2[i]
        i += 1
    return res

print("-------------------------------------------------------")
print("\tX=10\tX=20\tX=30\tX=40\tX=50\tY law")
idx_x = 10
idx_y = 10
list = []
list_2 = []
while idx_y <= 50:
    while idx_x <= 50:
        list_2.append(calc_value(args.a, idx_x, args.b, idx_y))
        idx_x += 10
    list_2.append(sum(list_2))
    list.append(list_2)
    print("Y={0:d}\t{1:.3f}\t{2:.3f}\t{3:.3f}\t{4:.3f}\t{5:.3f}\t{6:.3f}".format(idx_y, list_2[0], list_2[1], list_2[2], list_2[3], list_2[4], list_2[5]))
    list_2 = []
    idx_x = 10
    idx_y += 10
i = 0
while i <= 5:
    list_2.append(calc_sum_sublist(list, i))
    i += 1
list.append(list_2)
print("X law\t{0:.3f}\t{1:.3f}\t{2:.3f}\t{3:.3f}\t{4:.3f}\t{5:.3g}".format(list_2[0], list_2[1], list_2[2], list_2[3], list_2[4], list_2[5]))
list_2 = []

list_3 = []
i = 20
while i <= 100:
    list_3.append(calc_total(list, int((i / 10) - 2)))
    i += 10
list_3.append(sum(list_3))
print("-------------------------------------------------------")
print("z\t20\t30\t40\t50\t60\t70\t80\t90\t100\ttotal")
print("p(Z=z)\t{0:.3f}\t{1:.3f}\t{2:.3f}\t{3:.3f}\t{4:.3f}\t{5:.3f}\t{6:.3f}\t{7:.3f}\t{8:.3f}\t{9:.3g}".format(list_3[0], list_3[1], list_3[2], list_3[3], list_3[4], list_3[5], list_3[6], list_3[7], list_3[8], list_3[9]))
print("-------------------------------------------------------")
print("expected value of X:\t{:.1f}".format(calc_expected([10, 20, 30, 40, 50], list[len(list) - 1])))
print("variance of X:\t\t{:.1f}".format(calc_expected([10**2, 20**2, 30**2, 40**2, 50**2], list[len(list) - 1]) - calc_expected([10, 20, 30, 40, 50], list[len(list) - 1])**2))
print("expected value of Y:\t{:.1f}".format(calc_expected([10, 20, 30, 40, 50], [list[0][5], list[1][5], list[2][5], list[3][5], list[4][5]])))
print("variance of Y:\t\t{:.1f}".format(calc_expected([10**2, 20**2, 30**2, 40**2, 50**2], [list[0][5], list[1][5], list[2][5], list[3][5], list[4][5]]) - calc_expected([10, 20, 30, 40, 50], [list[0][5], list[1][5], list[2][5], list[3][5], list[4][5]]) ** 2))
print("expected value of Z:\t{:.1f}".format(calc_expected([20, 30, 40, 50, 60, 70, 80, 90, 100], list_3)))
print("variance of Z:\t\t{:.1f}".format(calc_expected([20**2, 30**2, 40**2, 50**2, 60**2, 70**2, 80**2, 90**2, 100**2], list_3) - calc_expected([20, 30, 40, 50, 60, 70, 80, 90, 100], list_3) ** 2))
print("-------------------------------------------------------")
